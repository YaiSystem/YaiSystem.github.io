<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DC-1靶机</title>
      <link href="/2025/05/17/Dc-1%E9%9D%B6%E6%9C%BA/"/>
      <url>/2025/05/17/Dc-1%E9%9D%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>下载地址：<a href="https://download.vulnhub.com/dc/DC-1.zip">https://download.vulnhub.com/dc/DC-1.zip</a></p><p>DC-1 是一个专门建造的易受攻击的实验室，目的是获得渗透测试领域的经验。它旨在为初学者带来挑战，但它的难易程度取决于您的技能和知识以及您的学习能力。要成功完成这一挑战，您需要具备 Linux 技能、熟悉 Linux 命令行并具有使用基本渗透测试工具的经验，例如可以在 Kali Linux 上找到的工具。</p><p>获得 root 权限的方法有很多种，DC-1提供了一些包含初学者线索的标志。总共有五个标志，但最终目标是在 root 用户的主目录中查找并读取该标志。您甚至不需要 root 用户身份即可执行此操作，但是您需要 root 权限。根据您的技能水平，您可能能够跳过查找大多数这些标志的步骤并直接获取 root 权限。初学者可能会遇到以前从未遇到过的挑战，但只需进行 Google 搜索即可获得完成此挑战所需的信息。</p><h3 id="0x01-信息搜集"><a href="#0x01-信息搜集" class="headerlink" title="0x01 信息搜集"></a>0x01 信息搜集</h3><p>拿到靶机之后正常导入VMware，之后开机修改网络连接方式：NAT方式。重启靶机确保网络连接方式已经修改。</p><p>使用nmap扫描靶机的IP地址：</p><img src="\jpg\DC1\1.png" alt="image" /><p>确定靶机的IP地址之后，继续扫描开放的端口和服务。</p><img src="\jpg\DC1\2" alt="image" /><p>看到靶机开放了80端口和22端口，尝试22端口的弱口令登录，发现无果，打开靶机的web界面，开局一个登录框，尝试弱口令去登录admin&#x2F;admin123，密码不对，尝试其他功能点，均没有任何有用效果。</p><img src="\jpg\DC1\3.png" alt="image" /><p>打开插件，发现是Drupal 7 之后去Google搜索历史漏洞</p><img src="\jpg\DC1\4.png" alt="image" /><h3 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h3><p>看到这样一篇文章，而且对应的版本是6&#x2F;7&#x2F;8，正好我们的靶机也是其中一个版本，之后到msf当中去search一下有没有可用的exp。之后可以详细去了解一下漏洞出现的成因。</p><img src="\jpg\DC1\5.png" alt="image" /><p>根据漏洞的CVE编号找到最近的EXP，使用EXP对靶机进行攻击。</p><img src="\jpg\DC1\6.png" alt="image" /><img src="\jpg\DC1\7.png" alt="image" /><p><img src="/%5Cjpg%5CDC1%5C8.png" alt="image"></p><h3 id="0x03-渗透测试"><a href="#0x03-渗透测试" class="headerlink" title="0x03 渗透测试"></a>0x03 渗透测试</h3><p>我们可以使用python去模拟一个伪真实的命令行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>之后就是和正常的命令行一样了，看起来就会舒服很多。</p><p><img src="/%5Cjpg%5CDC1%5C9.png" alt="image"></p><p><img src="/%5Cjpg%5CDC1%5C10.png" alt="image"></p><p>cat一下flag1.txt可以看到里面的内容，大概的意思就是：一个好的CMS需要 一个配置文件。这说明我们要去找一下这个CMS的配置文件的位置。（这里我们可以通过Google去搜一下，或者直接用Linux命令去查询。</p><p>我建议是Google搜素一下，简单快捷。</p><p>通过Google搜索到配置文件在sites&#x2F;default&#x2F;目录下</p><p><img src="/%5Cjpg%5CDC1%5C11.png" alt="image"></p><p>看一下flag2的提示：<img src="/%5Cjpg%5CDC1%5C12.png" alt="image"></p><p>根据flag2的提示和拿到的数据库密码，我们直接去连接数据库，找到了存储后台账号密码的表：</p><p><img src="/%5Cjpg%5CDC1%5C13.png" alt="image"></p><p>密码是被加密处理过的，继续去文件里面找加密脚本，然后根据加密脚本去重新修改密码。这里我们就不一个个就看了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">&quot;*pass*&quot;</span></span><br></pre></td></tr></table></figure><p>直接用这个命令就可以查到包含pass的文件。</p><p><img src="/%5Cjpg%5CDC1%5C14.png" alt="image"></p><p><img src="/%5Cjpg%5CDC1%5C15.png" alt="image"></p><p>用这个脚本把你要改的密码进行加密，然后更新数据库中的内容就可以了。之后用你更新的密码去登录后台。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update users set pass=&#x27;$S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.&#x27; where name=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/%5Cjpg%5CDC1%5C16.png" alt="image"></p><p>之后就是提权阶段了。</p><h3 id="0x04-权限提升"><a href="#0x04-权限提升" class="headerlink" title="0x04 权限提升"></a>0x04 权限提升</h3><p>SUID是set uid的简称，它出现在文件所属主权限的执行位上面，标志为 $ 。当设置了SUID后，UMSK第一位为4。我们知道，我们账户的密码文件存放在&#x2F;etc&#x2F;shadow中，而&#x2F;etc&#x2F;shadow的权限为 ———-。也就是说：只有root用户可以对该目录进行操作，而其他用户连查看的权限都没有。当普通用户要修改自己的密码的时候，可以使用passwd这个指令。passwd这个指令在&#x2F;bin&#x2F;passwd下，当我们执行这个命令后，就可以修改&#x2F;etc&#x2F;shadow下的密码了。那么为什么我们可以通过passwd这个指令去修改一个我们没有权限的文件呢？这里就用到了suid，suid的作用是让执行该命令的用户以该命令拥有者即root的权限去执行，意思是当普通用户执行passwd时会拥有root的权限，这样就可以修改&#x2F;etc&#x2F;passwd这个文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不同系统适用于不同的命令</span></span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-print2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><p><img src="/%5Cjpg%5CDC1%5C17.png" alt="image"></p><p>这里我就直接标注出可以用来提权的命令了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find 命令说明</span><br><span class="line">-<span class="built_in">exec</span> 参数后面跟的是<span class="built_in">command</span>命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。-<span class="built_in">exec</span>参数后面跟的就是我们想进一步操作的命令,so，我们可以以root的权限命令执行了</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果这里直接使用<span class="built_in">exec</span>参数，会让结果无限递归，因为并没有找到你需要的文件，所以你需要先创建一个123文件，然后确保能够`find`到这个文件再执行命令</span><br></pre></td></tr></table></figure><p><img src="/%5Cjpg%5CDC1%5C18.png" alt="image"></p><p><strong>注意</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提权使用 find / -perm -4000 2&gt;/dev/null来查看当前有哪些命令在使用的过程中具有root权限</span><br><span class="line">find 123 -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \; 使用find命令并执行/bin/sh调用命令解释器，解释器的权限也是root</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vulnhub靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc-隐写术</title>
      <link href="/2024/10/14/Misc-%E9%9A%90%E5%86%99%E6%9C%AF/"/>
      <url>/2024/10/14/Misc-%E9%9A%90%E5%86%99%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p><em>转载自<a href="http://blog.txsb.fun/">风之轻语</a></em></p><h1 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>STEGA即<strong>隐写术</strong>，将信息隐藏在多种载体中，如：视频、硬盘和图像，将需要隐藏的信息通过特殊的方式嵌入到载体中，而又不损害载体原来信息的表达。旨在保护需要隐藏的信息不被他人识别。信息隐蔽技术有：</p><ol><li>隐写术</li><li>数字水印</li><li>隐蔽信道</li><li>阀下信道</li><li>匿名信道</li></ol><h3 id="文件格式及文件头"><a href="#文件格式及文件头" class="headerlink" title="文件格式及文件头"></a>文件格式及文件头</h3><p><strong>图片类</strong></p><table><thead><tr><th>文件类型</th><th>后缀</th><th>文件头</th><th>文件尾</th><th>标志</th></tr></thead><tbody><tr><td>JPEG</td><td>.jpg&#x2F;.jpeg</td><td>FFD8FF</td><td>FFD9</td><td>JFIF</td></tr><tr><td>PNG</td><td>.png</td><td>89504E47</td><td>AE426082</td><td>PNG IEND IHDR</td></tr><tr><td>GIF</td><td>.gif</td><td>47494638</td><td>003B</td><td>GIT9a</td></tr><tr><td>TIFF</td><td>.tif&#x2F;.tiff</td><td>49492A00</td><td>4D4D2A00</td><td>- II MM</td></tr></tbody></table><p><strong>音频类</strong></p><table><thead><tr><th>文件类型</th><th>后缀</th><th>文件头</th><th>文件尾</th><th>标志</th></tr></thead><tbody><tr><td>WAVE</td><td>.wav</td><td>52494646</td><td>-</td><td>RIFF</td></tr></tbody></table><p><strong>压缩文件类</strong></p><table><thead><tr><th>文件类型</th><th>后缀</th><th>文件头</th><th>文件尾</th><th>标志</th></tr></thead><tbody><tr><td>ZIP Archive</td><td>.zip</td><td>504B0304</td><td>-</td><td>PK</td></tr><tr><td>RAR Archive</td><td>.rar</td><td>52617221</td><td>-</td><td>RAR!</td></tr><tr><td>7Z Archive</td><td>.7z</td><td>377ABCAF</td><td>-</td><td>7z</td></tr></tbody></table><p><strong>文本文档类</strong></p><table><thead><tr><th>文件类型</th><th>后缀</th><th>文件头</th><th>文件尾</th><th>标志</th></tr></thead><tbody><tr><td>XML</td><td>.xml</td><td>3C3F786D6C</td><td>-</td><td>-</td></tr><tr><td>HTML</td><td>.html</td><td>68746D6C3E</td><td>-</td><td>-</td></tr><tr><td>Adobe PDF</td><td>.pdf</td><td>255044462D312E</td><td>-</td><td>%PDF %%EOF</td></tr></tbody></table><h3 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h3><ul><li>一、附加式的图片隐写</li><li>二、基于文件结构的图片隐写</li><li>三、基于LSB原理的图片隐写</li><li>四、基于DCT域的JPG图片隐写</li><li>五、数字水印的隐写</li><li>六、图片容差的隐写</li></ul><h4 id="附加式图片隐写"><a href="#附加式图片隐写" class="headerlink" title="附加式图片隐写"></a>附加式图片隐写</h4><img src="/jpg/001.png" style="zoom: 25%;" /><p>拿到图片后打开，没有发现任何异常，猜测flag在图片数据中，使用kali自带的<strong>strings工具</strong>搜索字符串</p><img src="/jpg/解题001.jpg" style="zoom: 50%;" /><p>可以看到flag出来了，或者使用winhex等可以查看文件数据的都可以拿到flag</p><p><img src="/jpg/%E8%A7%A3%E9%A2%98002.jpg"></p><hr><p>文件的数据格式，是由文件头及具体的数据内容决定的，所以我们可以将两种格式的文件数据拼接，这样就达到了使用一个文件，存放n种文件的效果</p><p>图种：<br>一种采用特殊方式将图片文件（如jpg格式）与rar文件结合起来的文件。该文件一般保存为jpg格式，可以正常显示图片，当有人获取该图片后，可以修改文件的后缀名，将图片改为rar压缩文件，并得到其中的数据。<br>图种这是一种以图片文件为载体，通常为jpg格式的图片，然后将zip等压缩包文件附加在图片文件后面。因为操作系统识别的过程中是，从文件头标志，到文件的结束标志位，当系统识别到图片的结束标志位后，默认是不再继续识别的，所以我们在通常情况下只能看到它是只是一张图片。</p><img src="/jpg/1.jpg" style="zoom: 33%;" /><p>这样一张图片，同样的，我们也无法通过图片表面去发现，这里说一下如何判断图片中是否隐藏有其他文件</p><h5 id="隐藏文件检测"><a href="#隐藏文件检测" class="headerlink" title="隐藏文件检测"></a>隐藏文件检测</h5><ul><li>通过文件大小判断：正常的图片大小不会很大，如果发现文件大小几M几十M，甚至几百M，基本可以判断其中有隐藏文件</li><li>通过工具判断：可以使用binwalk一键检测或者winhex手动查看文件</li></ul><h5 id="隐藏文件分离"><a href="#隐藏文件分离" class="headerlink" title="隐藏文件分离"></a>隐藏文件分离</h5><p>使用kali自带的<strong>binwalk工具</strong>检测分离</p><p><code>binwalk 文件名 #按照文件头检测文件</code></p><p><code>binwalk 文件名 -e #将检测到的文件提取出来</code></p><p>使用winhex手动分离</p><p>使用winhex打开，按照文件头查找，将非图片数据的内容选中，右键编辑，复制选块到新文件，保存为zip文件</p><h4 id="基于文件结构的隐写"><a href="#基于文件结构的隐写" class="headerlink" title="基于文件结构的隐写"></a>基于文件结构的隐写</h4><p>对于一个正常的PNG图片来讲，其文件头总是由固定的字节来表示的，以16进制表示即位 89 50 4E 47 0D 0A 1A 0A，这一部分称作文件头。<br>标准的PNG文件结构应包括：</p><ul><li><p>PNG文件标志</p></li><li><p>PNG数据块</p></li><li><p>PNG图片是有两种数据块的，一个是叫关键数据块，另一种是辅助数据块。正常的关键数据块，定义了4种标准数据块，每个PNG文件都必须包含它们。<br>它们分别是长度，数据块类型码，数据块数据，循环冗余检测即CRC。<br>我们这里重点先了解一下，png图片文件头数据块以及png图片IDAT块，这次的隐写也是以这两个地方为基础的。<br><strong>png图片文件头数据块</strong><br>即IHDR，这是PNG图片的第一个数据块，一张PNG图片仅有一个IHDR数据块，它包含了哪些信息呢？IHDR中，包括了图片的宽，高，图像深度，颜色类型，压缩方法等等。</p><p><img src="https://public-cdn-oss.mosoteach.cn/mssvc/editor/00dcc5a41d9f6ae3663a4dcc76140361/2024/6/1d72a1fd7d07cb86f3f7c6a007d8398f.png" alt="https://public-cdn-oss.mosoteach.cn/mssvc/editor/00dcc5a41d9f6ae3663a4dcc76140361/2024/6/1d72a1fd7d07cb86f3f7c6a007d8398f.png">如图中蓝色的部分即IHDR数据块。</p><p><strong>IDAT 数据块</strong></p><p>它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。这是一个可以存在多个数据块类型的数据块。它的作用就是存储着图像真正的数据。<br>因为它是可以存在多个的，所以即使我们写入一个多余的IDAT也不会多大影响肉眼对图片的观察</p></li></ul><h5 id="高度被修改的隐写"><a href="#高度被修改的隐写" class="headerlink" title="高度被修改的隐写"></a>高度被修改的隐写</h5><h6 id="png图片结构详解"><a href="#png图片结构详解" class="headerlink" title="png图片结构详解"></a>png图片结构详解</h6><p>开头的0-7八个字节为png的文件头：89 50 4E 47 0D 0A 1A 0A （固定格式）</p><p>8-11四个字节：00 00 00 0D 表示头部数据块的长度为13（固定格式）</p><p>12-15四个字节：49 48 44 52 表示文件头数据块的标示（固定格式）</p><p>16-19四个字节：00 00 03 84表示图片的宽（不固定）</p><p>20-23四个字节：00 00 00 96表示图片的高（不固定）</p><p>24-28五个字节：08 02 00 00 00表示Bit depth（图像深度）、ColorType（颜色类型）、 Compression method（压缩方法）、 Filter method（滤波器方法）、Interlace method（隔行扫描方法）这五个字节不固定，均为可变数据</p><p>29-32四个字节：76 EC 1E 40为图片的crc校验值由从第12个字节到第28个字节的十七位字节进行crc计算得到</p><h6 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h6><p>首先校验CRC的值是否正确，也就是查看图片有没有被修改过</p><p>使用在线校验网站：<a href="http://www.ip33.com/crc.html">CRC校验</a>，输入第12到第28共十七位字节，参数模型选择CRC32，点击计算，得到图片CRC校验值</p><p>若校验值与图片的CRC值不相等，则说明该图片crc校验有问题。一般是由于高度或者宽度所引起的，这里需要用到脚本对其宽高进行爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;heigth.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()    <span class="comment">#打开图片</span></span><br><span class="line">crc32frombp = <span class="built_in">int</span>(crcbp[<span class="number">29</span>:<span class="number">33</span>].<span class="built_in">hex</span>(),<span class="number">16</span>)     <span class="comment">#读取图片中的CRC校验值</span></span><br><span class="line"><span class="built_in">print</span>(crc32frombp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):                        <span class="comment">#宽度1-4000进行枚举</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):                    <span class="comment">#高度1-4000进行枚举</span></span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="comment"># print(crc32)</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == crc32frombp):            <span class="comment">#计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span></span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h5 id="隐写信息以IDAT块加入图片"><a href="#隐写信息以IDAT块加入图片" class="headerlink" title="隐写信息以IDAT块加入图片"></a>隐写信息以IDAT块加入图片</h5><p>我们可以用 <code>pngcheck -v [文件名]</code> 去查看PNG文件数据块信息，然后利用 python zlib 解压多余IDAT块的内容，此时注意剔除长度、数据块类型及末尾的CRC校验值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">IDAT = <span class="string">&quot; &quot;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)<span class="comment">#双引号中填IDAT数据</span></span><br><span class="line">result = binascii.hexlify(zlib.decompress(IDAT))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h4 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h4><p>LSB，最低有效位，英文是Least Significant Bit 。我们知道图像像素一般是由RGB三原色（即红绿蓝）组成的，每一种颜色占用8位，0x00~0xFF，即一共有256种颜色，一共包含了256的3次方的颜色，颜色太多，而人的肉眼能区分的只有其中一小部分，这导致了当我们修改RGB颜色分量种最低的二进制位的时候，我们的肉眼是区分不出来的。<br><strong>Stegosolve介绍</strong><br>CTF中，最常用来检测LSB隐写痕迹的工具是Stegsolve，这是一款可以对图片进行多种操作的工具，包括对图片进行xor,sub等操作，对图片不同通道进行查看等功能。</p><p><img src="/jpg/LSB.png"></p><p>我们使用Stegosolve工具来进行解题，在工具中打开文件，点击箭头切换通道</p><p>发现图片分别在红0绿0蓝0通道中发现异常</p><img src="/jpg/解题004.jpg" style="zoom:50%;" /><p>接着我们查看该通道的信息</p><p><img src="/jpg/%E8%A7%A3%E9%A2%98005.jpg"></p><p>勾选上红绿蓝的异常通道后，点击预览，发现是个png格式的数据，点击保存导出为png，扫描导出的二维码图片发现flag</p><h4 id="JPG及其他图片隐写"><a href="#JPG及其他图片隐写" class="headerlink" title="JPG及其他图片隐写"></a>JPG及其他图片隐写</h4><h5 id="JPG隐写"><a href="#JPG隐写" class="headerlink" title="JPG隐写"></a>JPG隐写</h5><p>jpg方面的隐写，有F5隐写，Outguess算法隐写，盲水印攻击等隐写</p><p>可以使用Stegdetect工具解题</p><p><strong>Stegdetect的指令介绍</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-q 仅显示可能包含隐藏内容的图像。</span><br><span class="line">-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</span><br><span class="line">-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</span><br><span class="line">-d 打印带行号的调试信息。</span><br><span class="line">-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</span><br><span class="line">j 检测图像中的信息是否是用jsteg嵌入的。</span><br><span class="line">o 检测图像中的信息是否是用outguess嵌入的。</span><br><span class="line">p 检测图像中的信息是否是用jphide嵌入的。</span><br><span class="line">i 检测图像中的信息是否是用invisible secrets嵌入的。</span><br><span class="line">-V 显示软件版本号。</span><br><span class="line">如果检测结果显示该文件可能包含隐藏信息，那么Stegdetect会在检测结果后面使用1～3颗星来标识</span><br><span class="line">隐藏信息存在的可能性大小，3颗星表示隐藏信息存在的可能性最大。</span><br></pre></td></tr></table></figure><h5 id="GIF隐写"><a href="#GIF隐写" class="headerlink" title="GIF隐写"></a>GIF隐写</h5><p>gif图的隐写，因为gif是动态图，所以可以像视频一样，在其中一帧中隐藏信息，或其中的帧按规律进行信息隐藏</p><p>可以使用Stegosolve查看每一帧或者导出</p><h3 id="文档隐写"><a href="#文档隐写" class="headerlink" title="文档隐写"></a>文档隐写</h3><h4 id="word文档"><a href="#word文档" class="headerlink" title="word文档"></a>word文档</h4><ol><li>隐藏文字：word中可以将输入的文字隐藏，可以通过”文件”-“选项”-“显示”，将隐藏文字勾选，这样就会显示隐藏文字</li><li>与背景色相同：与背景色相同的文字可以选中，但是无法查看，只需要全选，然后更改文字颜色就可以了，或者Ctrl+F搜索关键字</li><li>嵌入图片：word中插入的图片分为嵌入式和非嵌入式，区别在嵌入式会跟着文本的位置产生移动，即有回车后，图片下移。但非嵌入的不会跟着文本走，即有回车后，图片保持原位置不动。可以将word文档后缀改为zip解压查看，或者使用binwalk、foremost等工具分离查看</li><li>xml文件隐藏：word文档可以转为xml文件，只需要把后缀改为zip解压，解压后的文件中，可能藏有flag信息</li></ol><h4 id="Excel表格"><a href="#Excel表格" class="headerlink" title="Excel表格"></a>Excel表格</h4><p>excel文件和word隐藏的方式差不多，需要注意的是，在Excel中，一个工作簿可以有多个工作表，不同的表里可能会有不同的信息</p><h4 id="NTFS数据流隐写"><a href="#NTFS数据流隐写" class="headerlink" title="NTFS数据流隐写"></a>NTFS数据流隐写</h4><p>NTFS这里不过多介绍，只需要清楚，它的创建和打开方式是<em><strong>宿主:寄宿文件</strong></em></p><p>比如，这里有一个txt文件，打开之后里面的内容为空，但是占用空间为22M，这很不正常</p><img src="https://public-cdn-oss.mosoteach.cn/mssvc/editor/00dcc5a41d9f6ae3663a4dcc76140361/2024/6/c8be1cafe6fe903b88f43cd8ca0d3af0.jpg" alt="001.jpg" style="zoom:50%;" /><p>其实是我用NTFS数据流的方式放了一本小说在里面</p><h5 id="如何查看"><a href="#如何查看" class="headerlink" title="如何查看"></a>如何查看</h5><p>这么多文件，我怎么知道它是不是可疑的文件，这里就要查看一下有哪些文件是有NTFS数据流的，可以使用以下命令<code>dir /r</code></p><p>如果有数据流文件的话，会在文件的后面显示**:NTFS:$DATA**，第一个冒号后面，表示的是数据流的文件名，第二个冒号后面表示是数据流</p><p>使用NtfsStreamsEditor工具可以搜索NTFS数据流文件</p><h5 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h5><ol><li>使用命令创建：我们可以使用echo或者type等命令将数据写入到其中</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 你好 &gt;hello.txt:world<span class="comment">#将“你好”这句话写入hello.txt中的world数据流</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用工具创建：使用NtfsStreamsEditor工具中的“编辑”来写入</li></ol><h5 id="如何打开"><a href="#如何打开" class="headerlink" title="如何打开"></a>如何打开</h5><ol><li>使用记事本打开：正常使用记事本打开肯定是看不到的，我们需要使用命令行来打开</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad 宿主:寄宿文件</span><br></pre></td></tr></table></figure><ol start="2"><li>使用NtfsStreamsEditor打开</li></ol><h4 id="零宽字符隐写"><a href="#零宽字符隐写" class="headerlink" title="零宽字符隐写"></a>零宽字符隐写</h4><p>零宽度字符是一些不可见的，不可打印的字符。它们存在于页面中主要用于调整字符的显示格式。</p><p>常见的零宽度字符及它们的unicode码和原本用途：</p><p>零宽度空格符 (zero-width space) U+200B : 用于较长单词的换行分隔<br>零宽度非断空格符 (zero-width no-break space) U+FEFF : 用于阻止特定位置的换行分隔<br>零宽度连字符 (zero-width joiner) U+200D : 用于阿拉伯文与印度语系等文字中，使不会发生连字的字符间产生连字效果<br>零宽度断字符 (zero-width non-joiner) U+200C : 用于阿拉伯文，德文，印度语系等文字中，阻止会发生连字的字符间的连字效果<br>左至右符 (left-to-right mark) U+200E : 用于在混合文字方向的多种语言文本中（例：混合左至右书写的英语与右至左书写的希伯来语），规定排版文字书写方向为左至右<br>右至左符 (right-to-left mark) U+200F : 用于在混合文字方向的多种语言文本中，规定排版文字书写方向为右至左</p><h5 id="怎么实现的怎么实现的？"><a href="#怎么实现的怎么实现的？" class="headerlink" title="怎么实现的怎么实现的？"></a>怎么实现的怎么实现的？</h5><p>首先，输入需要被加密的内容将被转换为其二进制形式，然后该二进制将被转换为一系列表示每个二进制数字的零宽度字符。然后可以将零宽度的字符串不可见地插入正常文本中。如果将文本粘贴在其他地方，则可以提取零宽度的字符串，然后反向进行操作以找出被加密的内容！</p><p><strong>具体加密过程</strong></p><ol><li>将需加密的内容转换为二进制<br>只是将每个字符转换为其等效的二进制</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">zeroPad</span> = num =&gt; ‘<span class="number">00000000</span>’.<span class="title function_">slice</span>(<span class="title class_">String</span>(num).<span class="property">length</span>) + num;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">textToBinary</span> = username =&gt; (</span><br><span class="line">  username.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">char</span> =&gt;</span></span><br><span class="line">    <span class="title function_">zeroPad</span>(char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">2</span>))).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>将二进制转换为0宽字符<br>它将遍历二进制字符串，并将每个1转换为0宽度空间，将每个0转换为零宽非连接符。转换字母后，我们将插入0宽连接符，然后再下一个。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">binaryToZeroWidth</span> = binary =&gt; (</span><br><span class="line">  binary.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">binaryNum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = <span class="built_in">parseInt</span>(binaryNum, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;​&#x27;</span>; <span class="comment">// zero-width space</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;‌&#x27;</span>; <span class="comment">// zero-width non-joiner</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;‍&#x27;</span>; <span class="comment">// zero-width joiner</span></span><br><span class="line">  &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// zero-width no-break space</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="3"><li>插入正常文本中</li></ol><p>需要注意的是加密与解密所使用的字典必须一致，也就是说，在哪儿进行加密的，就要在哪儿解密。</p><h4 id="Base64隐写"><a href="#Base64隐写" class="headerlink" title="Base64隐写"></a>Base64隐写</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在了解base64隐写之前，我们先来了解一下base64编码。</p><p>base64编码是现在网络上最常见的用于传输8Bit字节码的编码方式之一。在最初有的网络并<strong>不支持所有的字节</strong>，比如某些系统只支持可见字符的传送，比如图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。所以由于不能传送ASCII的控制字符，它的用途就受到了很大的限制。</p><p>而Base64旨在通过一种方法，<strong>把所有的字符都用64个特定的可打印字符表示来实现传送</strong>。选定的64个字符如下：</p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">索引</td><td align="left">对应字符</td><td align="left">索引</td><td align="left">对应字符</td><td align="left">索引</td><td align="left">对应字符</td><td align="left">索引</td><td align="left">对应字符</td></tr><tr><td align="left">0</td><td align="left">A</td><td align="left">17</td><td align="left">R</td><td align="left">34</td><td align="left">i</td><td align="left">51</td><td align="left">z</td></tr><tr><td align="left">1</td><td align="left">B</td><td align="left">18</td><td align="left">S</td><td align="left">35</td><td align="left">j</td><td align="left">52</td><td align="left">0</td></tr><tr><td align="left">2</td><td align="left">C</td><td align="left">19</td><td align="left">T</td><td align="left">36</td><td align="left">k</td><td align="left">53</td><td align="left">1</td></tr><tr><td align="left">3</td><td align="left">D</td><td align="left">20</td><td align="left">U</td><td align="left">37</td><td align="left">l</td><td align="left">54</td><td align="left">2</td></tr><tr><td align="left">4</td><td align="left">E</td><td align="left">21</td><td align="left">V</td><td align="left">38</td><td align="left">m</td><td align="left">55</td><td align="left">3</td></tr><tr><td align="left">5</td><td align="left">F</td><td align="left">22</td><td align="left">W</td><td align="left">39</td><td align="left">n</td><td align="left">56</td><td align="left">4</td></tr><tr><td align="left">6</td><td align="left">G</td><td align="left">23</td><td align="left">X</td><td align="left">40</td><td align="left">o</td><td align="left">57</td><td align="left">5</td></tr><tr><td align="left">7</td><td align="left">H</td><td align="left">24</td><td align="left">Y</td><td align="left">41</td><td align="left">p</td><td align="left">58</td><td align="left">6</td></tr><tr><td align="left">8</td><td align="left">I</td><td align="left">25</td><td align="left">Z</td><td align="left">42</td><td align="left">q</td><td align="left">59</td><td align="left">7</td></tr><tr><td align="left">9</td><td align="left">J</td><td align="left">26</td><td align="left">a</td><td align="left">43</td><td align="left">r</td><td align="left">60</td><td align="left">8</td></tr><tr><td align="left">10</td><td align="left">K</td><td align="left">27</td><td align="left">b</td><td align="left">44</td><td align="left">s</td><td align="left">61</td><td align="left">9</td></tr><tr><td align="left">11</td><td align="left">L</td><td align="left">28</td><td align="left">c</td><td align="left">45</td><td align="left">t</td><td align="left">62</td><td align="left">+</td></tr><tr><td align="left">12</td><td align="left">M</td><td align="left">29</td><td align="left">d</td><td align="left">46</td><td align="left">u</td><td align="left">63</td><td align="left">&#x2F;</td></tr><tr><td align="left">13</td><td align="left">N</td><td align="left">30</td><td align="left">e</td><td align="left">47</td><td align="left">v</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">14</td><td align="left">O</td><td align="left">31</td><td align="left">f</td><td align="left">48</td><td align="left">w</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">15</td><td align="left">P</td><td align="left">32</td><td align="left">g</td><td align="left">49</td><td align="left">x</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">16</td><td align="left">Q</td><td align="left">33</td><td align="left">h</td><td align="left">50</td><td align="left">y</td><td align="left"></td><td align="left"></td></tr></tbody></table><h5 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h5><p>由于只用到了<strong>64个字符</strong>，所以使用6个二进制位(2^6 &#x3D; 64)完全可以把所有的字符表示出来，于是原来的1个字节8位在base64编码中变成了1个字节6位。</p><p>换言之：把原本的3个字节变成现在的4个字节，因为(<code>3*8 == 4*6</code>)</p><p>所以在加密的时候首先写出原字符ASCII码对应的二进制数字，每个字符都可以得到一个8位的01串，再把该01串重新按照每6位一组划分即可得到一个新的数字，对照上图给出的表格可以得到一个新的字符。</p><p>但是这里有一个问题了：如果明文的字节数刚好是3的倍数那没有问题，按照6位一组划分肯定是刚刚好的；但是如果明文的字节数不是3的倍数，那按照6位一组划分不是就有剩余了吗？具体可见下图：</p><p>这样是没有剩余的：</p><p><img src="/jpg/jm1.png"></p><p>而这样是有剩余的：</p><p><img src="/jpg/jm2.png"></p><p>而base64给出的解决方法是<strong>在二进制数串后面加0，一直到二进制数串变成8和6的公倍数</strong>，然后把只有0的字节编码成”&#x3D;”，如下图：</p><p><img src="/jpg/jm3.png"></p><p>所以<code>LoV3</code>被编码成了<code>TG9WMw==</code> ，同时base64编码后面最多只可能出现2个<code>==</code></p><h5 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h5><p>解密的过程可视作加密的逆过程</p><p>由于”&#x3D;”是最后为了补齐填充的，所以解密的时候首先把”&#x3D;”删去，然后写出二进制数串，然后从左往右每8位一组，剩余的不足8位丢掉，然后根据转换表获得相应字符：</p><p>以上图为例，<code>TG9WMw==</code>首先变成了<code>TG9WMw</code>，对照上图的表写出来二进制数串：</p><p><img src="/jpg/jm4.png"></p><p>然后每8位一组，剩余不足的丢弃：</p><p><img src="/jpg/jm5.png"></p><p>所以这里牵涉到了一个地方，由上面的过程我们可以看成，<code>TG9WMw</code>在解密回<code>LoV3</code>的时候，按每8位一组剩余的丢弃来算，最后的<code>110000</code>中的<code>0000</code>是没有用到的。所以换句话说，这剩下的4位无论是<code>0000</code>还是<code>1111</code>，都是要被丢弃的，所以这就提供了一个可以<strong>隐藏信息</strong>的地方：</p><p><img src="/jpg/jm6.png"></p><p><code>TG9WMx==</code>解密后依然是<code>LoV3</code>，但已经隐藏进了一个1进去，那么这就是base64隐写</p><p>那么，在平时我们<strong>如何判断有没有信息被隐藏进去了呢</strong></p><p>最简单的就是你是否隐藏信息，解密得到的明文是不变的，那么你重新按照正确的加密流程计算一遍，如果发现结果不一样，那么就说明隐藏进了信息。</p><p>一般CTF题目中出现一大堆base64编码字符串的时候，更需要考虑base64隐写</p><p>这里附上一个base64提取隐藏信息的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag_encode.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="string">&#x27;&#x27;</span>.join(line.split())</span><br><span class="line">        rowb64 =  <span class="string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).split())</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>])-b64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)])</span><br></pre></td></tr></table></figure><h3 id="其他文件隐写"><a href="#其他文件隐写" class="headerlink" title="其他文件隐写"></a>其他文件隐写</h3><h4 id="压缩包"><a href="#压缩包" class="headerlink" title="压缩包"></a>压缩包</h4><h5 id="一、zip"><a href="#一、zip" class="headerlink" title="一、zip"></a>一、zip</h5><p>CTF中的压缩包隐写一般有这样几个套路</p><p>1、通过编码转换隐藏信息（common）<br>比如给出一堆字符或数字，仔细观察为某种进制，将其解码为十六进制，观察其文件头是压缩包或者是其他格式，修改后缀名后解压得flag</p><p>2、在文件中隐藏压缩包（图种）<br>在CTF压缩包隐写中最为常见，多用于在一个文件中隐藏一个压缩包</p><p>原理：以jpg格式为例，完整的JPG由FF D8开头，FF D9结束，图片浏览器会忽略FF D9之后的内容，因此可以在JPG文件之后加入其他的文件。</p><p>利用foremost，dd或者直接将其修改为压缩包后缀进行提取。<br>推荐使用foremost，因为foremost还可以分离其他隐藏的文件。<br>修改为ZIP文件虽然方法简单，但是如果隐写了多个文件时可能会失败。<br>以前不知道foremost的时候一直是用dd分离的，后边知道了foremost就一直用的foremost。</p><p>3、伪加密<br>原理：ZIP伪加密是在文件头的加密标志位进行修改，进而再次打开文件时被识别为加密压缩包。</p><p>ZIP文件主要由三个部分组成：压缩源文件数据区 + 核心目录 + 目录结束标志</p><h6 id="压缩源文件数据区"><a href="#压缩源文件数据区" class="headerlink" title="压缩源文件数据区"></a>压缩源文件数据区</h6><p>local file header + file data + data descriptor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> file header：文件头用于标识该文件的开始，记录了该压缩文件的信息，</span><br><span class="line">这里的文件头标识由固定值 50 4B 03 04 开头，也是 ZIP 的文件头的重要标志。</span><br><span class="line"></span><br><span class="line">file data：文件数据记录了相应压缩文件的数据。</span><br><span class="line"></span><br><span class="line">data descriptor：数据描述符用于标识该文件压缩结束，</span><br><span class="line">该结构只有在相应的 <span class="built_in">local</span> file header 中通用标记字段的第 3 bit设为 1 时才会出现，</span><br><span class="line">紧接在压缩文件源数据后。</span><br><span class="line">12345678</span><br><span class="line">50 4B 03 04：这是头文件标记（0x04034b50） </span><br><span class="line">14 00：解压文件所需 pkware 版本 </span><br><span class="line">00 00：全局方式位标记（有无加密） </span><br><span class="line">08 00：压缩方式 </span><br><span class="line">5A 7E：最后修改文件时间 </span><br><span class="line">F7 46：最后修改文件日期 </span><br><span class="line">16 B5 80 14：CRC-32校验（1480B516） </span><br><span class="line">19 00 00 00：压缩后尺寸（25） </span><br><span class="line">17 00 00 00：未压缩尺寸（23） </span><br><span class="line">07 00：文件名长度 </span><br><span class="line">00 00：扩展记录长度 </span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><p>6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 （直到核心目录文件头标识）<br><img src="/jpg/jm7.png"></p><h6 id="压缩源文件目录区"><a href="#压缩源文件目录区" class="headerlink" title="压缩源文件目录区"></a>压缩源文件目录区</h6><p>记录了压缩文件的目录信息，在这个数据区中每一条纪录对应在压缩源文件数据区中的一条数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">50 4B 01 02：目录中文件文件头标记(0x02014b50)  </span><br><span class="line">3F 00：压缩使用的 pkware 版本  </span><br><span class="line">14 00：解压文件所需 pkware 版本  </span><br><span class="line">00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）  </span><br><span class="line">08 00：压缩方式  </span><br><span class="line">5A 7E：最后修改文件时间  </span><br><span class="line">F7 46：最后修改文件日期 </span><br><span class="line"></span><br><span class="line">16 B5 80 14：CRC-32校验（1480B516）  </span><br><span class="line">19 00 00 00：压缩后尺寸（25）  </span><br><span class="line">17 00 00 00：未压缩尺寸（23）  </span><br><span class="line">07 00：文件名长度  </span><br><span class="line">24 00：扩展字段长度  </span><br><span class="line">00 00：文件注释长度  </span><br><span class="line">00 00：磁盘开始号  </span><br><span class="line">00 00：内部文件属性  </span><br><span class="line">20 00 00 00：外部文件属性  </span><br><span class="line">00 00 00 00：局部头部偏移量  </span><br><span class="line">6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 (直到目录结束标识头）</span><br><span class="line">12345678910111213141516171819</span><br></pre></td></tr></table></figure><p><img src="/jpg/jm8.png"><br><img src="/jpg/jm9.png"></p><h6 id="目录结束标识"><a href="#目录结束标识" class="headerlink" title="目录结束标识"></a>目录结束标识</h6><p>存在于整个归档包的结尾，用于标记压缩的目录数据的结束。每个压缩文件必须有且只有一个结束标识。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">50 4B 05 06：目录结束标记  </span><br><span class="line">00 00：当前磁盘编号  </span><br><span class="line">00 00：目录区开始磁盘编号  </span><br><span class="line">01 00：本磁盘上纪录总数  </span><br><span class="line">01 00：目录区中纪录总数  </span><br><span class="line">59 00 00 00：目录区尺寸大小  </span><br><span class="line">3E 00 00 00：目录区对第一张磁盘的偏移量  </span><br><span class="line">00 00：ZIP 文件注释长度</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p><img src="/jpg/jm10.png"></p><h6 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h6><p>zip伪加密是在文件头的加密标志位做修改，进而再打开文件时识被别为加密压缩包。</p><p>如果把第二个<strong>加密标记位</strong>的00 00改为09 00，打开就会提示有密码：<br><img src="/jpg/jm11.png"><br>其实改成<strong>09</strong>只是举的一个例子，只要末位是<strong>奇数</strong>，就代表加密，反之，末位是偶数代表未加密。<br>有时这里是<strong>01</strong>，也代表加密！不用更改！</p><h6 id="识别真假加密"><a href="#识别真假加密" class="headerlink" title="识别真假加密"></a>识别真假加密</h6><p>无加密<br>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为00 00</p><p>假加密<br>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件<strong>目录</strong>区的全局方式位标记应当为09 00</p><p>真加密<br>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00<br><img src="/jpg/jm12.png"></p><h4 id="二、RAR"><a href="#二、RAR" class="headerlink" title="二、RAR"></a>二、RAR</h4><h5 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h5><p>RAR 文件主要由标记块，压缩文件头块，文件头块，结尾块组成。</p><p>其每一块大致分为以下几个字段：<br><img src="/jpg/jm13.png"><br>RAR压缩包的文件头为：52 61 72 21 1A 07 00</p><p>其后是标记块（MARK_HEAD），还有文件头（FILE_HEAD）。</p><h5 id="主要攻击方式"><a href="#主要攻击方式" class="headerlink" title="主要攻击方式"></a>主要攻击方式</h5><p>1、爆破</p><p>利用linux下的rarcrack（<a href="http://rarcrack.sourceforge.net/%EF%BC%89">http://rarcrack.sourceforge.net/）</a></p><p>2、伪加密</p><p>RAR 文件的伪加密在文件头中的位标记字段上，用 010 Editor 可以很清楚的看见这一位，修改这一位可以造成伪加密。</p><p>3、其他如明文攻击等方法与ZIP相同。</p><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><h5 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h5><p>播放音频文件，可以听到有规律的长短音，使用Audacity工具打开，可以看到波形图，使用0和1或者·和-记录下来</p><p><img src="/jpg/%E8%A7%A3%E9%A2%98006.jpg"></p><p>放到相关工具或在线解码网站解密</p><p><strong>使用python脚本解密</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">CODE = &#123;</span><br><span class="line">        <span class="string">&quot;.-&quot;</span>: <span class="string">&quot;A&quot;</span>, <span class="string">&quot;-...&quot;</span>: <span class="string">&quot;B&quot;</span>, <span class="string">&quot;-.-.&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;-..&quot;</span>: <span class="string">&quot;D&quot;</span>, <span class="string">&quot;.&quot;</span>: <span class="string">&quot;E&quot;</span>, <span class="string">&quot;..-.&quot;</span>: <span class="string">&quot;F&quot;</span>, <span class="string">&quot;--.&quot;</span>: <span class="string">&quot;G&quot;</span>,</span><br><span class="line">        <span class="string">&quot;....&quot;</span>: <span class="string">&quot;H&quot;</span>, <span class="string">&quot;..&quot;</span>: <span class="string">&quot;I&quot;</span>, <span class="string">&quot;.---&quot;</span>: <span class="string">&quot;J&quot;</span>, <span class="string">&quot;-.-&quot;</span>: <span class="string">&quot;K&quot;</span>, <span class="string">&quot;.-..&quot;</span>: <span class="string">&quot;L&quot;</span>, <span class="string">&quot;--&quot;</span>: <span class="string">&quot;M&quot;</span>, <span class="string">&quot;-.&quot;</span>: <span class="string">&quot;N&quot;</span>,</span><br><span class="line">        <span class="string">&quot;---&quot;</span>: <span class="string">&quot;O&quot;</span>, <span class="string">&quot;.--．&quot;</span>: <span class="string">&quot;P&quot;</span>, <span class="string">&quot;--.-&quot;</span>: <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;.-.&quot;</span>: <span class="string">&quot;R&quot;</span>, <span class="string">&quot;...&quot;</span>: <span class="string">&quot;S&quot;</span>, <span class="string">&quot;-&quot;</span>: <span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;..-&quot;</span>: <span class="string">&quot;U&quot;</span>, <span class="string">&quot;...-&quot;</span>: <span class="string">&quot;V&quot;</span>, <span class="string">&quot;.--&quot;</span>: <span class="string">&quot;W&quot;</span>, <span class="string">&quot;-..-&quot;</span>: <span class="string">&quot;X&quot;</span>, <span class="string">&quot;-.--&quot;</span>: <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;--..&quot;</span>: <span class="string">&quot;Z&quot;</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="string">&quot;-----&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;.----&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;..---&quot;</span>: <span class="string">&quot;2&quot;</span>, <span class="string">&quot;...--&quot;</span>: <span class="string">&quot;3&quot;</span>, <span class="string">&quot;....-&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;.....&quot;</span>: <span class="string">&quot;5&quot;</span>, <span class="string">&quot;-....&quot;</span>: <span class="string">&quot;6&quot;</span>, <span class="string">&quot;--...&quot;</span>: <span class="string">&quot;7&quot;</span>, <span class="string">&quot;---..&quot;</span>: <span class="string">&quot;8&quot;</span>, <span class="string">&quot;----.&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="string">&quot;.-.-.-&quot;</span>: <span class="string">&quot;.&quot;</span>, <span class="string">&quot;---...&quot;</span>: <span class="string">&quot;:&quot;</span>, <span class="string">&quot;--..--&quot;</span>: <span class="string">&quot;,&quot;</span>, <span class="string">&quot;-.-.-.&quot;</span>: <span class="string">&quot;;&quot;</span>, <span class="string">&quot;..--..&quot;</span>: <span class="string">&quot;?&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-...-&quot;</span>: <span class="string">&quot;=&quot;</span>, <span class="string">&quot;.----.&quot;</span>: <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;-..-.&quot;</span>: <span class="string">&quot;/&quot;</span>, <span class="string">&quot;-.-.--&quot;</span>: <span class="string">&quot;!&quot;</span>, <span class="string">&quot;-....-&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;..--.-&quot;</span>: <span class="string">&quot;_&quot;</span>, <span class="string">&quot;.-..-.&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;-.--.&quot;</span>: <span class="string">&quot;(&quot;</span>, <span class="string">&quot;-.--.-&quot;</span>: <span class="string">&quot;)&quot;</span>, <span class="string">&quot;...-..-&quot;</span>: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">        <span class="string">&quot;.-...&quot;</span>: <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;.--.-.&quot;</span>: <span class="string">&quot;@&quot;</span>, <span class="string">&quot;.-.-.&quot;</span>: <span class="string">&quot;+&quot;</span>,</span><br><span class="line">    &#125;   <span class="comment">#摩斯密码字典</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#编码模块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">morse_encode</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment">#n = input(&quot;[+]要编码的明文为: &quot;).upper()</span></span><br><span class="line">    inverted_code = &#123;value:key <span class="keyword">for</span> key,value <span class="keyword">in</span> CODE.items()&#125;</span><br><span class="line">    codelist = []</span><br><span class="line">    keylist = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.:,;?=&#x27;/!-_\&quot;()$&amp;@+&quot;</span></span><br><span class="line">    <span class="comment">#keylist = []</span></span><br><span class="line">    <span class="comment">#for i in inverted_code.keys():</span></span><br><span class="line">    <span class="comment">#    keylist.append(i)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> n:</span><br><span class="line">        codelist.append(<span class="built_in">str</span>(inverted_code.get(i)) + <span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> codelist:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;None &#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error！仅支持如下字符：\n&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(keylist))</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[=]编码结果为:\n&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(codelist))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#解码模块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">morse_decode</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment">#n = input(&quot;[+]要解码的密文为: &quot;)</span></span><br><span class="line">    codelist = []</span><br><span class="line">    spl = <span class="built_in">input</span>(<span class="string">r&quot;[+]分隔符&quot;</span> + <span class="string">&#x27;(&quot;/&quot;或空格)&#x27;</span> + <span class="string">&quot;为:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(spl) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(spl) == <span class="number">32</span> <span class="keyword">or</span> <span class="built_in">ord</span>(spl) == <span class="number">47</span>:</span><br><span class="line">            <span class="keyword">if</span> spl <span class="keyword">not</span> <span class="keyword">in</span> n:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[x]请检查分隔符是否正确!&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[!]如果只翻译一个字符请在最后加空格，并将分隔符设为空格！&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s = <span class="built_in">str</span>(n).split(spl)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">                codelist.append(<span class="built_in">str</span>(CODE.get(i)))</span><br><span class="line">            <span class="keyword">if</span> codelist[<span class="number">0</span>] == <span class="built_in">str</span>(<span class="literal">None</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[x]请检查分隔符或密文是否正确&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">ord</span>(n[-<span class="number">1</span>]) == <span class="number">32</span>:</span><br><span class="line">                    codelist.pop()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[=]解码结果为:&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(codelist))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[x]请输入&quot;</span><span class="string">&#x27; / &#x27;</span><span class="string">&quot;或 空格！&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(spl) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[x]请输入分隔符！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!]如果只翻译一个字符请在最后加空格，并将分隔符设为空格！&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(spl) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[x]请输入一位分隔符！&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#cmd调用函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">morsecode</span>(<span class="params">encode, decode, text</span>):</span><br><span class="line">    <span class="keyword">if</span> encode:</span><br><span class="line">        <span class="keyword">if</span> text:</span><br><span class="line">            n = text.upper()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]要编码的明文为：&quot;</span> + n)</span><br><span class="line">            morse_encode(n)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            morse_encode(<span class="built_in">input</span>(<span class="string">&quot;[+]要编码的明文为: &quot;</span>).upper())</span><br><span class="line">    <span class="keyword">elif</span> decode:</span><br><span class="line">        <span class="keyword">if</span> text:</span><br><span class="line">            n = text</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]要解码的密文为：&quot;</span> + n)</span><br><span class="line">            morse_decode(n)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            morse_decode(<span class="built_in">input</span>(<span class="string">&quot;[+]要解码的密文为：&quot;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运用argparse方法实现cmd调用</span></span><br><span class="line">paser = argparse.ArgumentParser(description=<span class="string">&#x27;morsecode e&amp;d&#x27;</span>)</span><br><span class="line">paser.add_argument(<span class="string">&#x27;--encode&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>,nargs=<span class="string">&#x27;?&#x27;</span>, const=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;调用encode模块&#x27;</span>)</span><br><span class="line">paser.add_argument(<span class="string">&#x27;--decode&#x27;</span>, <span class="string">&#x27;-d&#x27;</span>,nargs=<span class="string">&#x27;?&#x27;</span>, const=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;调用decode模块&#x27;</span>)</span><br><span class="line">paser.add_argument(<span class="string">&#x27;--text&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>,nargs=<span class="string">&#x27;?&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;传入明文或密文，请用双引号框选字符串&#x27;</span>)</span><br><span class="line">args = paser.parse_args()</span><br><span class="line"> </span><br><span class="line">morsecode(args.encode, args.decode, args.text)</span><br></pre></td></tr></table></figure><h5 id="频谱图"><a href="#频谱图" class="headerlink" title="频谱图"></a>频谱图</h5><p>将音频频谱放大或缩小，直到出现有效信息</p><img src="https://public-cdn-oss.mosoteach.cn/mssvc/editor/00dcc5a41d9f6ae3663a4dcc76140361/2024/6/58e0491beca3697944647be5f9ee5d85.jpg" alt="001_蓝山看图王.jpg" style="zoom: 25%;" />]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全管理与评估-应急响应</title>
      <link href="/2024/08/09/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E4%B8%8E%E8%AF%84%E4%BC%B0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2024/08/09/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E4%B8%8E%E8%AF%84%E4%BC%B0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是应急响应"><a href="#什么是应急响应" class="headerlink" title="什么是应急响应"></a>什么是应急响应</h2><p>应急响应,指的是在应对突发事件或危机情况时采取的及时有效措施,以控制和减轻事件带来的影响,保障安全。</p><p>在检测到网络安全事件（如黑客攻击、数据泄露、系统入侵等）后，组织采取的一系列预定义的行动和程序，以最小化损失和影响，恢复正常运营，并防止未来的安全威胁。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>0x01：Windows入侵排查</li><li>0x02：Linux入侵排查</li><li>0x03：Windows日志分析</li><li>0x04：Web日志分析</li><li>0x05：MySQL日志分析</li></ul><hr><h2 id="0x01：Windows入侵排查"><a href="#0x01：Windows入侵排查" class="headerlink" title="0x01：Windows入侵排查"></a>0x01：Windows入侵排查</h2><h4 id="1-1、查看服务器中是否存在可疑用户或者新增用户。"><a href="#1-1、查看服务器中是否存在可疑用户或者新增用户。" class="headerlink" title="1.1、查看服务器中是否存在可疑用户或者新增用户。"></a>1.1、查看服务器中是否存在可疑用户或者新增用户。</h4><blockquote><p>检查方法：Win+R -&gt; 输入【<strong>lusrmgr.msc</strong>】命令，查看是否存在可疑账户，如果Administrators的管理员组当中存在可疑用户，提交或者删除。</p></blockquote><h4 id="1-2、是否存在隐藏账号。"><a href="#1-2、是否存在隐藏账号。" class="headerlink" title="1.2、是否存在隐藏账号。"></a>1.2、是否存在隐藏账号。</h4><blockquote><p>①、打开注册表，查看管理员对应键值</p><p><img src="/jpg/080901.png"></p></blockquote><h4 id="1-3、通过日志查看管理员登录时间、用户名和IP是否异常。"><a href="#1-3、通过日志查看管理员登录时间、用户名和IP是否异常。" class="headerlink" title="1.3、通过日志查看管理员登录时间、用户名和IP是否异常。"></a>1.3、通过日志查看管理员登录时间、用户名和IP是否异常。</h4><blockquote><p>①、Win+R 打开运行，输入“<strong>eventvwr.msc</strong>”，打开“事件查看器”。</p><p>②、直接按下 Win键 ，搜索“事件查看器”。（系统版本可能存在不同）</p><p>③、通过Windows常用事件ID筛选题目或者想要查询的日志类型和具体内容。（常见Windows事件ID详情<strong>0x03</strong>。）</p><img src="/jpg/080902.png" style="zoom:150%;" /></blockquote><h4 id="1-4、查看异常的端口、进程和可疑IP及连接。"><a href="#1-4、查看异常的端口、进程和可疑IP及连接。" class="headerlink" title="1.4、查看异常的端口、进程和可疑IP及连接。"></a>1.4、查看异常的端口、进程和可疑IP及连接。</h4><blockquote><p><strong>netstat -ano</strong> 查看目前的网络连接情况，找到可疑的<strong>ESTABLISHED</strong>以及<strong>PID</strong></p><img src="/jpg/080903.png" style="zoom:150%;" /></blockquote><h4 id="1-5、检查系统启动项、计划任务和服务"><a href="#1-5、检查系统启动项、计划任务和服务" class="headerlink" title="1.5、检查系统启动项、计划任务和服务"></a>1.5、检查系统启动项、计划任务和服务</h4><blockquote><p>①、启动项</p><p>a、单击【开始】-&gt; 【所有程序】-&gt; 【启动】，默认情况下这里面是一个空目录，确认是否有非正常的程序或者脚本在该目录下存在。</p><p>b、【C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup】此路径同上</p><p>c、按住win+R 输入【<strong>shell:startup</strong>】，即可调出<strong>启动</strong>目录</p><img src="/jpg/080904.png" style="zoom:150%;" /><p>d、按住 win+R 输入【<strong>msconfig</strong>】，查看是否存在命名异常的启动项。</p><img src="/jpg/080905.png" style="zoom:150%;" /><p>e、按住 Win+R 输入【<strong>regedit</strong>】，打开注册表查看以下三个注册表项，验证开机启动项是否正常。</p><p>HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run </p><p>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</p><p>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</p><p>f、按住 Win+R 输入【gpedit.msc】，打开组策略（win11无法用这个命令打开）检查是否有脚本自启动。</p><p>②、计划任务</p><p>a、打开【控制面板】-&gt; 【Windows工具】-&gt;【任务计划】,查看木马后门的文件路径，对其进一步查杀。</p><img src="/jpg/080906.png" style="zoom:150%;" /><p>b、【<strong>CMD</strong>】-&gt; 输入【<strong>at</strong>】(win11已经弃用<strong>at</strong>命令，使用<strong>schtasks.exe</strong>命令，原理相同)，检查计算机与网络上其他计算机之间的会话或者计划任务。</p><img src="/jpg/080907.png" style="zoom:150%;" /><p>③、服务自启动</p><p>a、按住Win+R 输入 【<strong>services.msc</strong>】注意服务状态和启动类型，检查是否异常。</p><img src="/jpg/080908.png" style="zoom:150%;" /></blockquote><hr><h2 id="0x02：Linux入侵排查"><a href="#0x02：Linux入侵排查" class="headerlink" title="0x02：Linux入侵排查"></a>0x02：Linux入侵排查</h2><h4 id="2-1-账号安全"><a href="#2-1-账号安全" class="headerlink" title="2.1 账号安全"></a>2.1 账号安全</h4><blockquote><p>1.用户信息文件：&#x2F;etc&#x2F;passwd</p><img src="/jpg/080909.png" style="zoom:150%;" /><p>用户名：密码：用户ID：组ID：用户说明：家目录</p><p>注意：无密码只允许本机登录，不能远程登录。</p><p>2.影子文件：&#x2F;etc&#x2F;shadow</p><img src="/jpg/080910.png" style="zoom:150%;" /><p>用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之 后的宽限天数：账号失效时间：保留</p></blockquote><h4 id="2-2-入侵排查"><a href="#2-2-入侵排查" class="headerlink" title="2.2 入侵排查"></a>2.2 入侵排查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">①、通过history命令查看此账号执行过的系统命令，根据命令判断此账号进行了什么行为。</span><br><span class="line">②、查看异常端口</span><br><span class="line">netstat -antlp|more</span><br><span class="line">查看PID所对应的进程文件路径</span><br><span class="line">③、使用ps命名，分析进程：</span><br><span class="line">ps -aux|grep pid</span><br></pre></td></tr></table></figure><h4 id="2-3-开机启动配置文件"><a href="#2-3-开机启动配置文件" class="headerlink" title="2.3 开机启动配置文件"></a>2.3 开机启动配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.local</span><br><span class="line">/etc/rc.d/rc[0-6].d</span><br></pre></td></tr></table></figure><img src="/jpg/080911.png" style="zoom:150%;" /><img src="/jpg/080912.png" style="zoom:150%;" /><h4 id="2-4-排查定时任务"><a href="#2-4-排查定时任务" class="headerlink" title="2.4 排查定时任务"></a>2.4 排查定时任务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、crontab</span><br><span class="line">crontab -l 列出某个用户cront服务的详细内容</span><br><span class="line">crontab -r 删除每个用户cront任务</span><br><span class="line">crontab -e 编辑当前的crontab文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重点关注以下目录是否存在恶意脚本</span><br><span class="line"></span><br><span class="line">/var/spool/cron/*</span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/*</span><br><span class="line">/etc/cron.hourly/*</span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure><h4 id="2-5-排查系统日志"><a href="#2-5-排查系统日志" class="headerlink" title="2.5 排查系统日志"></a>2.5 排查系统日志</h4><p>日志默认存放位置：&#x2F;var&#x2F;log&#x2F;</p><p>查看日志配置情况：cat &#x2F;etc&#x2F;rsyslog.conf</p><table><thead><tr><th align="center">日志文件路径</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x2F;var&#x2F;log&#x2F;secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换 用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系 统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要 使用lastlog命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文 件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登 录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr></tbody></table><h4 id="2-6-日志分析小技巧"><a href="#2-6-日志分析小技巧" class="headerlink" title="2.6 日志分析小技巧"></a>2.6 日志分析小技巧</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">awk 命令</span><br><span class="line">grep 命令</span><br><span class="line">sed 命令</span><br><span class="line">find 命令</span><br><span class="line">sort 命令</span><br><span class="line">uniq 命令</span><br><span class="line">top 命令</span><br><span class="line">last 命令</span><br><span class="line">xargs 命令</span><br><span class="line">netstat 命令</span><br><span class="line">more 命令</span><br><span class="line">diff 命令</span><br><span class="line"></span><br><span class="line">***// 以上Linux常用命令的所有语法及用法必须完全记住</span><br></pre></td></tr></table></figure><hr><h2 id="0x03：Windows日志分析"><a href="#0x03：Windows日志分析" class="headerlink" title="0x03：Windows日志分析"></a>0x03：Windows日志分析</h2><p>上述0x01当中已经讲过Windows的日志所在路径和方法，这次不再过多赘述</p><p>对于不同的Windows日志分析，有着不同的事件ID，下面是一些常见的事件ID ,也是2024年省赛用到的一些事件ID。</p><table><thead><tr><th align="center">事件ID</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">4624</td><td align="center">登录成功</td></tr><tr><td align="center">4625</td><td align="center">登录失败</td></tr><tr><td align="center">4634</td><td align="center">注销成功</td></tr><tr><td align="center">4647</td><td align="center">用户启动的注销</td></tr><tr><td align="center">4672</td><td align="center">使用管理员进行登录</td></tr><tr><td align="center">4720</td><td align="center">创建用户</td></tr></tbody></table><p>此外还有很多事件ID，这里不再一一描述，遇到之后去百度搜索就可以。</p><blockquote><p>可以利用eventlog事件来查看系统账号登录情况：</p><ol><li><p>在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器”；</p></li><li><p>在事件查看器中，单击“安全”，查看安全日志；</p></li><li><p>在安全日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选。 </p><p>4624 –登录成功 </p><p>4625 –登录失败 </p><p>4634 – 注销成功 </p><p>4647 – 用户启动的注销 </p><p>4672 – 使用超级用户（如管理员）进行登录</p><p> 我们输入事件ID：4625进行日志筛选，发现事件ID：4625，事件数175904，即用户登录失败了175904次，那么这台服务器管理员账号可能遭遇了暴力猜解。</p></li></ol></blockquote><img src="/jpg/080913.png" style="zoom:150%;" /><hr><h2 id="0x04：Web日志分析"><a href="#0x04：Web日志分析" class="headerlink" title="0x04：Web日志分析"></a>0x04：Web日志分析</h2><p>常见的中间件：Apache、Nginx、Tomcat、IIS、Weblogic</p><img src="/jpg/080914.png" style="zoom:150%;" /><p>这是一条Apache的访问日志，这里可以清楚的看到访问者的IP地址，访问事件，请求方式GET&#x2F;POST，访问时所用的操作系统和浏览器的内核版本，以及访问的哪个页面和回显是否正常等。</p><p>Linux下，可以配合Shell+Linux命令实现日志分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、列出日志当中访问次数最多的IP：</span><br><span class="line">cat log_file |awk &#x27;&#123;print($1)&#125;&#x27; |uniq -c |sor      //详细可以去看一看awk，uniq，sort命令的详细用法</span><br><span class="line">仅提供排查思路，命令的用法自己发挥</span><br><span class="line">2、列出日志当中成功访问的记录：</span><br><span class="line">cat log_file |grep 200</span><br><span class="line">3、列出日志当中成功被hacker上传的后门记录：</span><br><span class="line">cat log_file |grep 200 |grep POST</span><br></pre></td></tr></table></figure><p>应急响应中身为蓝队人员要做好防护职责，最好的防护思路就是读懂红队人员的攻击思路和攻击手段，用反方向的思维去做好防护。  <strong>—仅个人理解</strong>，简单点就是<strong>“知攻善防”</strong></p><p><strong>所有中间件的日志都默认存放在不同的路径下，这里需要你个人积累。</strong></p><hr><h2 id="0x05：MySQL日志分析"><a href="#0x05：MySQL日志分析" class="headerlink" title="0x05：MySQL日志分析"></a>0x05：MySQL日志分析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、查看log配置信息：</span><br><span class="line">show variables like &#x27;%general%&#x27;;</span><br><span class="line">2、开启日志：</span><br><span class="line">SET GLOBAL general_log=&#x27;On&#x27;;</span><br><span class="line">3、指定日志文件路径：</span><br><span class="line">#SET GLOBAL general_log_file=&#x27;/var/lib/mysql/mysql.log&#x27;;</span><br></pre></td></tr></table></figure><p>例如：当访问&#x2F;Demo.php?id&#x3D;1,此时得到这样的日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">240501 10:01:20          14 Connect    root@localhost on</span><br><span class="line">            20  Init DB      Demo</span><br><span class="line">            20  Query        SELECT * FROM admin WHERE id=1</span><br><span class="line">            20  Quit</span><br></pre></td></tr></table></figure><p>日志解读：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一列：时间列，前面是日期，后面是小时和分钟，另外有些sql语句几乎是同时执行，所以就不会另外再记录时间。</span><br><span class="line">第二列：ID，就是show processlist出来的第一列的线程ID。</span><br><span class="line">第三列：Command，操作类型，比如：Connect就是连接数据库，Query就是查询数据库（增删改查都显示为查询）。</span><br><span class="line">第四列：Argument，详细信息，比如root@localhost on就是连接数据库，以此类推，下面就是连接数据库之后做了什么操作。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>大神博客</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<!-- #<script>console.error("Error: [hexo-tag-aplayer] Meting support is disabled, cannot resolve the meting tags properly.");</script><div class="aplayer" data-id="8492133976" data-server="netease" data-type="playlist"  data-fixed="true" data-theme="#3F51B5"></#div> --><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=795 height=550 src="//music.163.com/outchain/player?type=0&id=6678743774&auto=1&height=430"></iframe>]]></content>
      
    </entry>
    
    
  
</search>
